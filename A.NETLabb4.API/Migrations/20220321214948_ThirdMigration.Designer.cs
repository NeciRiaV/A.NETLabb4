// <auto-generated />
using A.NETLabb4.API.Model;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace A.NETLabb4.API.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20220321214948_ThirdMigration")]
    partial class ThirdMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.23")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("A.NETLabb4.Models.Hobby", b =>
                {
                    b.Property<int>("HobbyID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HobbyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("HobbyID");

                    b.ToTable("Hobbies");

                    b.HasData(
                        new
                        {
                            HobbyID = 1,
                            Description = "Painting is the practice of applying paint, pigment, color or other medium to a solid surface.",
                            HobbyName = "Painting"
                        },
                        new
                        {
                            HobbyID = 2,
                            Description = "Dance is a performing art form consisting of sequences of movement, either improvised or purposefully selected.",
                            HobbyName = "Dance"
                        },
                        new
                        {
                            HobbyID = 3,
                            Description = "Soccer is a sport where the objective is to score in the opposite teams goal.",
                            HobbyName = "Soccer"
                        },
                        new
                        {
                            HobbyID = 4,
                            Description = "Karate is a martial art developed in the Ryukyu Kingdom.",
                            HobbyName = "Karate"
                        },
                        new
                        {
                            HobbyID = 5,
                            Description = "Swimming is the self-propulsion of a person through water, or other liquid, usually for recreation, sport, exercise, or survival.",
                            HobbyName = "Swimming"
                        });
                });

            modelBuilder.Entity("A.NETLabb4.Models.User", b =>
                {
                    b.Property<int>("UserID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Adress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserID");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserID = 1,
                            Adress = "Storgatan 16",
                            Name = "Hanna Lahtinen",
                            PhoneNumber = "0738987647"
                        },
                        new
                        {
                            UserID = 2,
                            Adress = "Nyhemsgatan 11",
                            Name = "Jennifer Gergi",
                            PhoneNumber = "0729098478"
                        },
                        new
                        {
                            UserID = 3,
                            Adress = "Storgatan 2",
                            Name = "Karl Levin",
                            PhoneNumber = "0737645387"
                        });
                });

            modelBuilder.Entity("A.NETLabb4.Models.UserHobby", b =>
                {
                    b.Property<int>("UserHobbyID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("HobbyID")
                        .HasColumnType("int");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.Property<string>("WebsiteLink")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserHobbyID");

                    b.HasIndex("HobbyID");

                    b.HasIndex("UserID");

                    b.ToTable("UserHobbies");

                    b.HasData(
                        new
                        {
                            UserHobbyID = 1,
                            HobbyID = 1,
                            UserID = 1,
                            WebsiteLink = "https://www.britannica.com/art/painting"
                        },
                        new
                        {
                            UserHobbyID = 2,
                            HobbyID = 2,
                            UserID = 1,
                            WebsiteLink = "https://justdancenow.com/?msclkid=a6db88d8a6f011ecb496d62156d715c2"
                        },
                        new
                        {
                            UserHobbyID = 3,
                            HobbyID = 3,
                            UserID = 2,
                            WebsiteLink = "https://nr.soccerway.com/?msclkid=c254e7a3a6f011ecbe9cf1576f5c8b26"
                        },
                        new
                        {
                            UserHobbyID = 4,
                            HobbyID = 4,
                            UserID = 3,
                            WebsiteLink = "https://www.karate.com/?msclkid=033d5163a6f111ecbd04e11c109355de"
                        },
                        new
                        {
                            UserHobbyID = 5,
                            HobbyID = 5,
                            UserID = 3,
                            WebsiteLink = "https://www.swimmingworldmagazine.com/news/the-2022-ncaa-womens-championships-day-2-finals-500-freestyle?msclkid=10132017a6f111ecba5147ba639fac7f"
                        },
                        new
                        {
                            UserHobbyID = 6,
                            HobbyID = 5,
                            UserID = 3,
                            WebsiteLink = "https://www.swimming.org/?msclkid=94a037dca6f111ecbfe16cc89f8fcbb2"
                        });
                });

            modelBuilder.Entity("A.NETLabb4.Models.UserHobby", b =>
                {
                    b.HasOne("A.NETLabb4.Models.Hobby", "Hobby")
                        .WithMany("UserHobbies")
                        .HasForeignKey("HobbyID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("A.NETLabb4.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
